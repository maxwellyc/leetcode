
def isValidSudoku(board):
    """
    :type board: List[List[str]]
    :rtype: bool
    """
    d = set()
    # key is string of number + r/c/b + row#/col#/box#
    # eg. the 5 in (0,0) would generate keys of
    # '5r0','5c0','5b0', the value doesn't matter
    for i in range(9):
        for j in range(9):
            num = board[i][j]
            if num != '.':
                x = num+'r'+str(i)
                y = num+'c'+str(j)
                z = num+'b'+str(3*(i//3)+j//3)
                if x in d or y in d or z in d:
                    return False
                else:
                    d.update([x,y,z])
                    #d[x],d[y],d[z] = True,True,True
    return True

board = [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]


#board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

print (isValidSudoku(board))
